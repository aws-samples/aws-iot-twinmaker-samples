# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. 2021
# SPDX-License-Identifier: Apache-2.0

import argparse
import uuid
import boto3
import os

'''
This utility creates a workspace role with necessary permissions for this CookieFactory sample
'''


def parse_args():
    parser = argparse.ArgumentParser(
        description='Creates a role for the AWS IoT TwinMaker workspace for this CookieFactory sample.')
    parser.add_argument('--region',
                        help="(optional) AWS region you are creating the sample in. Defaults to 'us-east-1'",
                        required=False, default='us-east-1')
    parser.add_argument('--profile',
                        help="(optional) AWS profile to access your account with. See your configured profiles with "
                             "`~/.aws/credentials`. Defaults to 'None'",
                        required=False, default=None)
    return parser.parse_args()


def main():
    args = parse_args()
    region = args.region
    profile = args.profile

    session = boto3.session.Session(profile_name=profile)
    iam = session.client(service_name='iam', region_name=region)
    identifier = uuid.uuid4().hex
    role_name = f"{'Cloud9-' if is_c9() else ''}IoTTwinMakerWorkspaceRole-{identifier[:8]}"
    create_role_response = iam.create_role(
        RoleName=role_name,
        Path="/",
        AssumeRolePolicyDocument="""{
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "iottwinmaker.amazonaws.com"
                            ]
                        },
                        "Action": "sts:AssumeRole"
                    }
                ]
            }
        """,
        Description='Role generated by AWS IoT TwinMaker Getting Started',
    )
    role_arn = create_role_response['Role']['Arn']
    print(f"Created IAM role: {role_arn}")

    # Note: for samples, we may create arbitrary iottwinmaker, s3, iotsitewise, and kinesisvideo resources so permissions are fairly wide
    #   for production deployments, it is recommended to scope-down these permissions once you have determined your minimal set of resources
    create_policy_response = iam.create_policy(
        PolicyName=f"IoTTwinMakerWorkspaceRolePolicy-{identifier}",
        PolicyDocument="""{
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Action": [
                            "iottwinmaker:*",
                            "s3:*",
                            "iotsitewise:*",
                            "kinesisvideo:*"
                        ],
                        "Resource": [
                            "*"
                        ],
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "lambda:invokeFunction"
                        ],
                        "Resource": [
                            "*"
                        ],
                        "Effect": "Allow"
                    },
                    {
                        "Condition": {
                            "StringEquals": {
                                "iam:PassedToService": "lambda.amazonaws.com"
                            }
                        },
                        "Action": [
                            "iam:PassRole"
                        ],
                        "Resource": [
                            "*"
                        ],
                        "Effect": "Allow"
                    }
                ]
            }
        """
    )
    policy_arn = create_policy_response['Policy']['Arn']
    print(f"Created IAM policy for IoT TwinMaker: {policy_arn}")
    iam.attach_role_policy(
        RoleName=role_name,
        PolicyArn=policy_arn
    )
    print(f"Attached policy to role.")

    print(f"------------------------\n\nNOTE: Please use this Role ARN when creating the AWS IoT TwinMaker workspace in the console:\n"
          f"\n  {role_arn.split('/')[-1]}\n")

# check if we're running in cloud9, if so then created roles need to be prefixed with "Cloud9-"
# https://docs.aws.amazon.com/cloud9/latest/user-guide/security-iam.html#auth-and-access-control-temporary-managed-credentials-supported
def is_c9():
    return os.getenv("C9_PROJECT") is not None

if __name__ == '__main__':
    main()
